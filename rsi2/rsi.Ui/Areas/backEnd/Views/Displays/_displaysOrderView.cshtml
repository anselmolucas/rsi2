<!-- fonte:
    http://www.html5rocks.com/pt/tutorials/dnd/basics/
-->

@model IEnumerable<rsi.Entities.Display>

<div class="container-fluid">
    <div class="row">
        <div class="col-xs-12">

            <div class="box box-purple">
                <div class="box-header">
                    <h3 class="box-title">ordenar os elementos - @ViewBag.View</h3>
                </div>
                <div class="box-body">

                    @using (Html.BeginForm("DisplaysOrder", "Displays", FormMethod.Post, new { i = "commentForm", enctype = "multipart/form-data", @class = "form-horizontal" }))
                    {
                        @*@Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })*@

                    int x = 0;
                    <div id="columns-full" style="list-style:none">
                        @{

                            foreach (var _item in Model)
                            {
                                var _objectives = _item.Display_type.ToString() + ": " + rsi.Apps.Functions.__maximumSizeOfTheText(_item.Title, 30) + " - " + rsi.Apps.Functions.__maximumSizeOfTheText(_item.Objectives, 70);
                                var _url = (_item.Display_type == rsi.Entities.Display.display_type.showCase ? "?v=adv&o=v" :
                                                       _item.Display_type == rsi.Entities.Display.display_type.advertising ? "?v=ads&o=v" :
                                                       _item.Display_type == rsi.Entities.Display.display_type.section ? "?v=sec&o=v" :
                                                       _item.Display_type == rsi.Entities.Display.display_type.widget ? "?v=wid&o=v" : ""
                                                       );
                                _url = String.IsNullOrEmpty(_url) ? "/backEnd/Admin/Index" : "/backEnd/Displays/Maintenance/" + _item.Id + _url;

                                <div class="column">
                                    <header><a href="@Url.Content(_url)" style="color:white;"><b>@_item.Name (@_item.Alias)</b></a></header>
                                    <div style="text-align:left;padding:10px;">
                                        <a href="@Url.Content(_url)" style="color:black;">#@_item.DisplayOrder - @_objectives (id: @_item.Id )</a>
                                    </div>

                                    <input type="hidden" name="@x.ToString()" value="@_item.Id">
                                </div>

                                    <br />
                                x++;
                            }
                        }
                    </div>
                   
                        string _resetLink = "/backEnd/Displays/DisplaysOrder/" + ViewBag.Id;
                   
                        <a href="@Url.Content(_resetLink)" class="btn btn-default">reset</a>
                        <button type="submit" class="btn btn-default" name="view" value="@ViewBag.View">salvar</button>
                    }

                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .link-noDecoration a:link, a:visited, a:hover, a:active {
        text-decoration: none;
    }
</style>
<script>
    // Full example
    (function() {
      var id_ = 'columns-full';
      var cols_ = document.querySelectorAll('#' + id_ + ' .column');
      var dragSrcEl_ = null;

      this.handleDragStart = function(e) {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', this.innerHTML);

        dragSrcEl_ = this;

        // this/e.target is the source node.
        this.addClassName('moving');
      };

      this.handleDragOver = function(e) {
        if (e.preventDefault) {
          e.preventDefault(); // Allows us to drop.
        }

        e.dataTransfer.dropEffect = 'move';

        return false;
      };

      this.handleDragEnter = function(e) {
        this.addClassName('over');
      };

      this.handleDragLeave = function(e) {
        // this/e.target is previous target element.
        this.removeClassName('over');
      };

      this.handleDrop = function(e) {
        // this/e.target is current target element.

        if (e.stopPropagation) {
          e.stopPropagation(); // stops the browser from redirecting.
        }

        // Don't do anything if we're dropping on the same column we're dragging.
        if (dragSrcEl_ != this) {
          dragSrcEl_.innerHTML = this.innerHTML;
          this.innerHTML = e.dataTransfer.getData('text/html');

          // Set number of times the column has been moved.
          var count = this.querySelector('.count');
          var newCount = parseInt(count.getAttribute('data-col-moves')) + 1;
          count.setAttribute('data-col-moves', newCount);
          count.textContent = 'moves: ' + newCount;
        }

        return false;
      };

      this.handleDragEnd = function(e) {
        // this/e.target is the source node.
        [].forEach.call(cols_, function (col) {
          col.removeClassName('over');
          col.removeClassName('moving');
        });
      };

      [].forEach.call(cols_, function (col) {
        col.setAttribute('draggable', 'true');  // Enable columns to be draggable.
        col.addEventListener('dragstart', this.handleDragStart, false);
        col.addEventListener('dragenter', this.handleDragEnter, false);
        col.addEventListener('dragover', this.handleDragOver, false);
        col.addEventListener('dragleave', this.handleDragLeave, false);
        col.addEventListener('drop', this.handleDrop, false);
        col.addEventListener('dragend', this.handleDragEnd, false);
      });
    })();
</script>

<style>
    }
    /* Prevent the text contents of draggable elements from being selectable. */
    [draggable] {
        -moz-user-select: none;
        -khtml-user-select: none;
        -webkit-user-select: none;
        user-select: none;
        /* Required to make elements draggable in old WebKit */
        -khtml-user-drag: element;
        -webkit-user-drag: element;
    }

    .column {
        height: 100%;
        width: 100%;
        /*float: left;*/
        border: 2px solid #666666;
        background-color: #ccc;
        margin-right: 5px;
        -webkit-border-radius: 10px;
        -ms-border-radius: 10px;
        -moz-border-radius: 10px;
        border-radius: 10px;
        -webkit-box-shadow: inset 0 0 3px #000;
        -ms-box-shadow: inset 0 0 3px #000;
        box-shadow: inset 0 0 3px #000;
        text-align: center;
        cursor: move;
    }

        .column header {
            color: #fff;
            text-shadow: #000 0 1px;
            box-shadow: 5px;
            padding: 5px;
            background: -moz-linear-gradient(left center, rgb(0,0,0), rgb(79,79,79), rgb(21,21,21));
            background: -webkit-gradient(linear, left top, right top, color-stop(0, rgb(0,0,0)), color-stop(0.50, rgb(79,79,79)), color-stop(1, rgb(21,21,21)));
            background: -webkit-linear-gradient(left center, rgb(0,0,0), rgb(79,79,79), rgb(21,21,21));
            background: -ms-linear-gradient(left center, rgb(0,0,0), rgb(79,79,79), rgb(21,21,21));
            border-bottom: 1px solid #ddd;
            -webkit-border-top-left-radius: 10px;
            -moz-border-radius-topleft: 10px;
            -ms-border-radius-topleft: 10px;
            border-top-left-radius: 10px;
            -webkit-border-top-right-radius: 10px;
            -ms-border-top-right-radius: 10px;
            -moz-border-radius-topright: 10px;
            border-top-right-radius: 10px;
        }

        .column.over {
            border: 2px dashed #000;
        }
</style>



